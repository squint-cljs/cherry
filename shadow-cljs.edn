{:deps {:aliases [:cljs]}
 :builds
 {:cherry
  {:js-options {;; don't bundle any npm libs
                :js-provider :import}
   :compiler-options {:infer-externs :auto}
   :devtools {:enabled false :console-support false}
   :target :esm
   :runtime :browser
   :output-dir "lib"
   :modules
   ;; note: this is overriden in bb build-cherry
   {:cljs.core {:default true
                :exports {assoc cljs.core/assoc
                          map cljs.core/map
                          str cljs.core/str
                          keyword cljs.core/keyword
                          symbol cljs.core/symbol
                          vector cljs.core/vector
                          toJs cljs.core/clj->js
                          toCljs cljs.core/js->clj
                          dissoc cljs.core/dissoc
                          conj cljs.core/conj
                          get cljs.core/get
                          array_map cljs.core/array-map
                          hash_map cljs.core/hash-map
                          first cljs.core/first
                          rest cljs.core/rest
                          next cljs.core/next
                          nth cljs.core/nth
                          seq cljs.core/seq
                          goog_typeOf goog/typeOf}}
    :clojure.string {:exports {join clojure.string/join}
                     :depends-on #{:cljs.core}}
    :clojure.walk {:exports {walk clojure.walk/walk}
                   :depends-on #{:cljs.core}}
    :clojure.set {:exports {walk clojure.set/intersection}
                  :depends-on #{:cljs.core}}
    :node {:entries [fs] :depends-on #{:compiler :cljs.core}}
    :compiler {:depends-on #{:cljs.core :clojure.string :clojure.walk}
               :exports
               {compileString cherry.compiler/compile-string
                compileStringEx cherry.compiler/compileStringEx}}
    :cli {:depends-on #{:compiler.node
                        :compiler :clojure.string
                        :clojure.walk
                        :clojure.set :node}
          :init-fn cherry.internal.cli/init}
    :compiler.sci {:depends-on #{:compiler :compiler.node :node :clojure.set}
                   :init-fn cherry.compiler.sci/init}
    :compiler.node {:depends-on #{:compiler :node}
                    :exports
                    {compileFile cherry.compiler.node/compile-file-js
                     compileString cherry.compiler.node/compile-string-js}}}
   :build-hooks [(shadow.cljs.build-report/hook
                  {:output-to "report.html"})]}}}
